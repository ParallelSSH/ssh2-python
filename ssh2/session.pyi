from typing import (
    Any,
    Final,
    BinaryIO,
)

class MethodType: ...

class Session:
    def disconnect(self) -> None: ...
    def handshake(self, sock) -> Any: ...
    def startup(self, sock): ...
    def set_blocking(self, blocking: bool) -> None: ...
    def get_blocking(self) -> bool: ...
    def set_timeout(self, timeout: int) -> None: ...
    def get_timeout(self) -> 'Any': ...
    def userauth_authenticated(self): ...
    def userauth_list(self, username): ...
    def userauth_publickey_fromfile(self, username, privatekey, passphrase=u'', publickey=None): ...
    def userauth_publickey(self, username, pubkeydata: bytes): ...
    def userauth_hostbased_fromfile(self, username, privatekey, hostname, publickey=None, passphrase=u''): ...
    def userauth_publickey_frommemory(self, username, privatekeyfiledata: bytes, passphrase=u'', publickeyfiledata: bytes | None = None): ...
    def userauth_password(self, username, password): ...
    def userauth_keyboardinteractive(self, username, password): ...
    def agent_init(self): ...
    def agent_auth(self, username): ...
    def open_session(self): ...
    def direct_tcpip_ex(self, host, port: int, shost, sport: int): ...
    def direct_tcpip(self, host, port: int): ...
    def block_directions(self): ...
    def forward_listen(self, port: int): ...
    def forward_listen_ex(self, queue_maxsize: int, host=None, port: int = 0): ...
    def sftp_init(self): ...
    def last_error(self, msg_size: int = 1024): ...
    def last_errno(self): ...
    def set_last_error(self, errcode: int, errmsg): ...
    def scp_recv(self, path): ...
    def scp_recv2(self, path): ...
    def scp_send(self, path, mode: int, size: int): ...
    def scp_send64(self, path, mode: int, size: int, mtime: int, atime: int): ...
    def publickey_init(self): ...
    def hostkey_hash(self, hash_type: int): ...
    def hostkey(self): ...
    def knownhost_init(self): ...
    def keepalive_config(self, want_reply: bool, interval: int): ...
    def keepalive_send(self): ...
    def supported_algs(self, method_type: MethodType): ...
    def methods(self, method_type: MethodType): ...
    def method_pref(self, method_type: MethodType, prefs): ...

    sock: Final[BinaryIO] = ...
